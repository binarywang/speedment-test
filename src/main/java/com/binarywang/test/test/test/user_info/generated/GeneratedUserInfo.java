package com.binarywang.test.test.test.user_info.generated;

import com.binarywang.test.test.test.user_info.UserInfo;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.enterprise.datastore.runtime.field.DatastoreFields;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.util.OptionalUtil;
import com.speedment.runtime.field.ComparableField;
import com.speedment.runtime.field.LongField;
import com.speedment.runtime.field.StringField;
import com.speedment.runtime.typemapper.TypeMapper;

import java.util.OptionalInt;

/**
 * The generated base for the {@link
 * com.binarywang.test.test.test.user_info.UserInfo}-interface representing
 * entities of the {@code user_info}-table in the database.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public interface GeneratedUserInfo {
    
    /**
     * This Field corresponds to the {@link UserInfo} field that can be obtained
     * using the {@link UserInfo#getId()} method.
     */
    LongField<UserInfo, Long> ID = DatastoreFields.createLongField(
        Identifier.ID,
        UserInfo::getId,
        UserInfo::setId,
        TypeMapper.primitive(),
        true
    );
    /**
     * This Field corresponds to the {@link UserInfo} field that can be obtained
     * using the {@link UserInfo#getName()} method.
     */
    StringField<UserInfo, String> NAME = DatastoreFields.createStringField(
        Identifier.NAME,
        UserInfo::getName,
        UserInfo::setName,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link UserInfo} field that can be obtained
     * using the {@link UserInfo#getAge()} method.
     */
    ComparableField<UserInfo, Integer, Integer> AGE = DatastoreFields.createComparableField(
        Identifier.AGE,
        o -> OptionalUtil.unwrap(o.getAge()),
        UserInfo::setAge,
        TypeMapper.identity(),
        false
    );
    
    /**
     * Returns the id of this UserInfo. The id field corresponds to the database
     * column test.test.user_info.id.
     * 
     * @return the id of this UserInfo
     */
    long getId();
    
    /**
     * Returns the name of this UserInfo. The name field corresponds to the
     * database column test.test.user_info.name.
     * 
     * @return the name of this UserInfo
     */
    String getName();
    
    /**
     * Returns the age of this UserInfo. The age field corresponds to the
     * database column test.test.user_info.age.
     * 
     * @return the age of this UserInfo
     */
    OptionalInt getAge();
    
    /**
     * Sets the id of this UserInfo. The id field corresponds to the database
     * column test.test.user_info.id.
     * 
     * @param id to set of this UserInfo
     * @return   this UserInfo instance
     */
    UserInfo setId(long id);
    
    /**
     * Sets the name of this UserInfo. The name field corresponds to the
     * database column test.test.user_info.name.
     * 
     * @param name to set of this UserInfo
     * @return     this UserInfo instance
     */
    UserInfo setName(String name);
    
    /**
     * Sets the age of this UserInfo. The age field corresponds to the database
     * column test.test.user_info.age.
     * 
     * @param age to set of this UserInfo
     * @return    this UserInfo instance
     */
    UserInfo setAge(Integer age);
    
    enum Identifier implements ColumnIdentifier<UserInfo> {
        
        ID   ("id"),
        NAME ("name"),
        AGE  ("age");
        
        private final String columnId;
        private final TableIdentifier<UserInfo> tableIdentifier;
        
        Identifier(String columnId) {
            this.columnId        = columnId;
            this.tableIdentifier = TableIdentifier.of(    getDbmsId(), 
                getSchemaId(), 
                getTableId());
        }
        
        @Override
        public String getDbmsId() {
            return "test";
        }
        
        @Override
        public String getSchemaId() {
            return "test";
        }
        
        @Override
        public String getTableId() {
            return "user_info";
        }
        
        @Override
        public String getColumnId() {
            return this.columnId;
        }
        
        @Override
        public TableIdentifier<UserInfo> asTableIdentifier() {
            return this.tableIdentifier;
        }
    }
}